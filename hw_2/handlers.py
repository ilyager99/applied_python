from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, FSInputFile
from aiogram.filters import Command
import matplotlib.pyplot as plt
from state import User, Food, Workout
from config import API_WET, API_TR
from aiohttp import ClientSession
import random
import requests
import re

router = Router()
API_KEY = API_WET
API_TRAIN = API_TR


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command('start'))
async def cmd_start(message: Message):
    welcome_message = await message.reply(
        f'<b>Ô∏èüèãÔ∏è‚Äç‚ôÇÔ∏è–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É.</b>üßò‚Äç‚ôÇÔ∏è\n'
        '\n–í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.\n\n'
        '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.',
        parse_mode='HTML'
    )
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É show_keyboard
    await show_keyboard(welcome_message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command('help'))
async def cmd_help(message: Message):
    help_message = await message.reply(
        '<u>–ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</u>\n\n'
        '1. <b>–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</b> - –ó–∞–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n'
        '2. <b>–ê–∫–∫–∞—É–Ω—Ç</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.\n'
        '3. <b>–ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è</b> - –£—á–µ—Ç –≤—ã–ø–∏—Ç–æ–π –∂–∏–¥–∫–æ—Å—Ç–∏ –∏ –ø–æ–∫–∞–∑ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –¥–æ –Ω–æ—Ä–º—ã.\n'
        '4. <b>–ü–∏—Ç–∞–Ω–∏–µ</b> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏—è—Ö –∑–∞ –¥–µ–Ω—å.\n'
        '5. <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å</b> - –£—á–µ—Ç —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π.\n'
        '6. <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</b> - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∂–∏–¥–∫–æ—Å—Ç–∏ –∏ –∫–∞–ª–æ—Ä–∏—è–º.',
        parse_mode='HTML'
    )
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É show_keyboard
    await show_keyboard(help_message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /keyboard —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def show_keyboard(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data='profile'),
                InlineKeyboardButton(text='–ê–∫–∫–∞—É–Ω—Ç', callback_data='get_profile'),
            ],
            [
                InlineKeyboardButton(text='–ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è', callback_data='water'),
                InlineKeyboardButton(text='–ü–∏—Ç–∞–Ω–∏–µ', callback_data='food'),
            ],
            [
                InlineKeyboardButton(text='–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å Ô∏è', callback_data='training'),
                InlineKeyboardButton(text='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã', callback_data='progress')

            ]
        ]
    )
    await message.bot.edit_message_reply_markup(
        chat_id=message.chat.id,
        message_id=message.message_id,
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
@router.callback_query()
async def handle_callback(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == 'profile':
        await start_profile(callback_query.message, state)
    elif callback_query.data == 'get_profile':
        await get_profile(callback_query.message, state)
    elif callback_query.data == 'water':
        await start_water(callback_query.message, state)
    elif callback_query.data == 'food':
        await calories(callback_query.message, state)
    elif callback_query.data == 'training':
        await start_training(callback_query.message, state)
    elif callback_query.data == 'progress':
        await start_progress(callback_query.message, state)
    else:
        await callback_query.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è.")


@router.message(Command('profile'))
async def start_profile(message: Message, state: FSMContext):
    # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await state.clear()
    await message.answer('<b><u>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"</u></b>\n\n'
                         '–ù–∞–∑–æ–≤–∏—Ç–µ –í–∞—à–µ –∏–º—è?',
                         parse_mode='HTML')
    await state.set_state(User.name)


@router.message(User.name)
async def process_manual_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    elif not re.match('^[A-Za-z–ê-–Ø–∞-—è–Å—ës]+$', name):
        await message.answer('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.')
        return
    await state.update_data(name=name)
    await message.answer('–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç?')
    await state.set_state(User.age)


@router.message(User.age)
async def process_age(message: Message, state: FSMContext):
    age = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
    if not age.isdigit() or not (10 <= int(age) < 100):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:')
        return
    await state.update_data(age=int(age))
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:')
    await state.set_state(User.weight)


@router.message(User.weight)
async def process_weight(message: Message, state: FSMContext):
    weight = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–µ—Å–∞
    if not weight.isdigit() or not (30 <= float(weight) <= 500):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å:')
        return
    await state.update_data(weight=float(weight))
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:')
    await state.set_state(User.height)


@router.message(User.height)
async def process_height(message: Message, state: FSMContext):
    height = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞
    if not height.isdigit() or not (120 <= int(height) <= 300):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç:')
        return
    await state.update_data(height=int(height))
    await message.answer('–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º—è –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –º–∏–Ω—É—Ç–∞—Ö?')
    await state.set_state(User.activity_level)


@router.message(User.activity_level)
async def process_activity_level(message: Message, state: FSMContext):
    activity_level = message.text.strip()
    if not activity_level.isdigit() or not (0 <= int(activity_level) <= 1440):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç:')
        return
    await state.update_data(activity_level=int(activity_level))
    await message.answer('–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ?\n')
    await state.set_state(User.city)


@router.message(User.city)
async def process_city(message: Message, state: FSMContext):
    city = message.text.strip()
    if not re.match('^[A-Za-zs]+$', city):
        await message.answer(
            '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑—Ö–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏.')
        return
    await state.update_data(city=city)
    await message.answer('–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º?\n'
                         '(–ù–∞–∂–º–∏—Ç–µ "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", —á—Ç–æ–±—ã —è –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ –í–∞—Å)')
    await state.set_state(User.calorie_goal)


async def calculate_calories(data):
    weight = float(data.get("weight", 0))
    height = float(data.get("height", 0))
    age = int(data.get("age", 0))
    activity_level = int(data.get("activity_level", 0))

    # –†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–µ
    calories = 10 * weight + 6.25 * height - 5 * age
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if activity_level < 30:
        calories += 200
    elif activity_level < 60:
        calories += 300
    else:
        calories += 400

    return calories


async def display_user_data(data, calorie_goal, goal_type, message):
    data = await message.answer(f'<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n'
                                f'–ò–º—è: {data.get("name")}\n'
                                f'–í–æ–∑—Ä–∞—Å—Ç: {data.get("age")} –ª–µ—Ç\n'
                                f'–í–µ—Å: {data.get("weight")} –∫–≥\n'
                                f'–†–æ—Å—Ç: {data.get("height")} —Å–º\n'
                                f'–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {data.get("activity_level")} –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å\n'
                                f'–ì–æ—Ä–æ–¥: {data.get("city")}\n'
                                f'–¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {calorie_goal} –∫–∫–∞–ª ({goal_type})', parse_mode='HTML')
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_keyboard(data)


@router.message(User.calorie_goal)
async def process_calorie_goal(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text.lower() == "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é":
        calories = await calculate_calories(data)
        await state.update_data(custom_calorie_goal=float(calories))
        await display_user_data(data, calories, "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", message)
    else:
        custom_calorie_goal = message.text.strip()
        if not custom_calorie_goal.isdigit() or not (800 <= int(custom_calorie_goal) <= 6000):
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π:')
            return
        await state.update_data(custom_calorie_goal=float(custom_calorie_goal))
        await display_user_data(data, message.text, "–∑–∞–¥–∞–Ω–æ –≤—Ä—É—á–Ω—É—é", message)


###################################Profile##############################################
@router.message(Command('get_profile'))
async def get_profile(message: Message, state: FSMContext):
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if not data.get('name'):
        p = await message.answer('<b><u>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Ñ–∏–ª—å"</u></b>\n\n'
                                 '<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç.</b> –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.',
                                 parse_mode='HTML')
    else:
        p = await message.answer(
            '<b><u>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Ñ–∏–ª—å"</u></b>\n\n'
            f'<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n'
            f'–ò–º—è: {data.get("name")}\n'
            f'–í–æ–∑—Ä–∞—Å—Ç: {data.get("age")} –ª–µ—Ç\n'
            f'–í–µ—Å: {data.get("weight")} –∫–≥\n'
            f'–†–æ—Å—Ç: {data.get("height")} —Å–º\n'
            f'–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {data.get("activity_level")} –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å\n'
            f'–ì–æ—Ä–æ–¥: {data.get("city")}\n'
            f'–¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {data.get("custom_calorie_goal")} –∫–∫–∞–ª\n'
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã: {data.get("logged_water", 0)} –º–ª\n'
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π: +{data.get("logged_calories", 0)} –∫–∫–∞–ª\n'
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π: -{data.get("burned_calories", 0)} –∫–∫–∞–ª',
            parse_mode='HTML'
        )
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_keyboard(p)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ API –∏–∑ –¥–∑1
async def fetch_temperature(session, city):
    params = {'q': city, 'appid': API_KEY, 'units': 'metric', 'lang': 'ru'}
    async with session.get('https://api.openweathermap.org/data/2.5/weather', params=params) as response:
        if response.status == 200:
            data = await response.json()
            return data['main']['temp']
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–æ—Ä–æ–¥–∞ {city}: {response.status}")
            return None


async def get_temperature(city):
    async with ClientSession() as session:
        return await fetch_temperature(session, city)


@router.message(Command('water'))
async def start_water(message: Message, state: FSMContext):
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if not data.get('name'):
        p = await message.answer('<b><u>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–í–æ–¥–∞"</u></b>\n\n'
                                 '<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç.</b> –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.',
                                 parse_mode='HTML')
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_keyboard(p)
    else:
        await message.answer('<b><u>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–í–æ–¥–∞"</u></b>\n\n'
                             '–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã (–≤ –º–ª) –í—ã —É–∂–µ –≤—ã–ø–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è?',
                             parse_mode='HTML')
        await state.set_state(User.logged_water)


async def calculate_water_goal(message: Message, data):
    weight = float(data.get('weight', 0))
    activity = int(data.get('activity', 0))
    city = data.get('city', '')
    logged_water = float(data.get('logged_water', 0))

    base_water_intake = weight * 30  # –≤ –º–ª
    additional_water = 0

    if activity > 0:
        additional_water += (activity // 30) * 500  # 500 –º–ª –∑–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

    current_temp = await get_temperature(city) if city else None
    if current_temp is not None and current_temp > 25:
        additional_water += 500
    if current_temp is not None and current_temp > 30:
        additional_water += 500

    total_water_goal = base_water_intake + additional_water
    remaining_water = total_water_goal - logged_water
    return current_temp, total_water_goal, remaining_water


def plot_water_intake(message, logged_water, total_water_goal, water_intake_w):
    adjusted_target = int(total_water_goal) + int(water_intake_w)
    categories = ['–í–æ–¥—ã –ø–æ—Ç—Ä–µ–±–∏–ª–∏', '–ù–æ—Ä–º–∞']
    values = [int(logged_water), adjusted_target]
    colors = ['blue', 'green']

    fig, ax = plt.subplots()
    bars = ax.bar(categories, values, color=colors)  # —Ç—É—Ç

    # –ü–æ–¥–ø–∏—Å–∏ –Ω–∞–¥ —Å—Ç–æ–ª–±–∏–∫–∞–º–∏
    for bar in bars:
        yval = bar.get_height()
        ax.text(bar.get_x() + bar.get_width() / 2, yval, round(yval, 2), ha='center', va='bottom')

    if water_intake_w > 0:
        additional_water_bar = ax.bar('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è –Ω–æ—Ä–º–∞', int(water_intake_w), bottom=int(total_water_goal),
                                      color='blue',
                                      label='–î–æ–ø –≤–æ–¥–∞')

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –º–µ—Ç–∫–∏
    ax.set_title('–í—ã–ø–∏—Ç–∞—è –≤–æ–¥–∞ –≤ –¥–µ–Ω—å')
    ax.set_ylabel('–û–±—ä–µ–º')

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
    if water_intake_w > 0:
        ax.legend(loc='upper right')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ñ–∞–π–ª
    plt.savefig('water_intake.jpg')
    plt.close()


@router.message(User.logged_water)
async def process_logged_water(message: Message, state: FSMContext):
    logged_water = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
    if not logged_water.isdigit() or not (0 <= int(logged_water) <= 5000):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –≤ –º–ª.')
        return
    await state.update_data(logged_water=int(logged_water))
    data = await state.get_data()
    current_temp, total_water_goal, remaining_water = await calculate_water_goal(message, data)
    water_intake_w = data.get('water_intake_w', 0)
    plot_water_intake(message, logged_water, total_water_goal, water_intake_w)
    if water_intake_w == 0:
        if (int(total_water_goal) - int(logged_water)) == 0:
            photo = await message.answer_photo(photo=FSInputFile('water_intake.jpg', filename='–ì—Ä–∞—Ñ–∏–∫ –≤–æ–¥—ã'),
                                               caption=f'–í—ã —É–ø–æ—Ç—Ä–µ–±–∏–ª–∏ {logged_water} –º–ª –∏–∑ —Ç—Ä–µ–±—É–µ–º—ã—Ö {int(total_water_goal)} –º–ª –∂–∏–¥–∫–æ—Å—Ç–∏.\n'
                                                       f'<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b> –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–≤–æ–µ–π —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã üíß',
                                               parse_mode='HTML')
        elif (int(total_water_goal) - int(logged_water)) < 0:
            photo = await message.answer_photo(photo=FSInputFile('water_intake.jpg', filename='–ì—Ä–∞—Ñ–∏–∫ –≤–æ–¥—ã'),
                                               caption=f'–í—ã —É–ø–æ—Ç—Ä–µ–±–∏–ª–∏ {logged_water} –º–ª –∏–∑ —Ç—Ä–µ–±—É–µ–º—ã—Ö {int(total_water_goal)} –º–ª –∂–∏–¥–∫–æ—Å—Ç–∏.\n'
                                                       f'<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ —Å–≤–æ—é –Ω–æ—Ä–º—É üíß', parse_mode='HTML')
        else:
            photo = await message.answer_photo(photo=FSInputFile('water_intake.jpg', filename='–ì—Ä–∞—Ñ–∏–∫ –≤–æ–¥—ã'),
                                               caption=f'–í—ã —É–ø–æ—Ç—Ä–µ–±–∏–ª–∏ {logged_water} –º–ª –∏–∑ —Ç—Ä–µ–±—É–µ–º—ã—Ö {int(total_water_goal)} –º–ª –∂–∏–¥–∫–æ—Å—Ç–∏.\n'
                                                       f'–û—Å—Ç–∞–ª–æ—Å—å –µ—â–µ {int(remaining_water)} –º–ª –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–æ—Ä–º—ã.')
    else:
        if (int(total_water_goal) + int(water_intake_w) - int(logged_water)) == 0:
            photo = await message.answer_photo(photo=FSInputFile('water_intake.jpg', filename='–ì—Ä–∞—Ñ–∏–∫ –≤–æ–¥—ã'),
                                               caption='<b>–û—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!</b>\n'
                                                       f'–í—ã —É–ø–æ—Ç—Ä–µ–±–∏–ª–∏ {logged_water} –º–ª –∏–∑ —Ç—Ä–µ–±—É–µ–º—ã—Ö {int(total_water_goal) + int(water_intake_w)} –º–ª –∂–∏–¥–∫–æ—Å—Ç–∏.\n'
                                                       f'<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b> –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–≤–æ–µ–π —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã üíß',
                                               parse_mode='HTML')
        elif (int(total_water_goal) + int(water_intake_w) - int(logged_water)) < 0:
            photo = await message.answer_photo(photo=FSInputFile('water_intake.jpg', filename='–ì—Ä–∞—Ñ–∏–∫ –≤–æ–¥—ã'),
                                               caption='<b>–û—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!</b>\n'
                                                       f'–í—ã —É–ø–æ—Ç—Ä–µ–±–∏–ª–∏ {logged_water} –º–ª –∏–∑ —Ç—Ä–µ–±—É–µ–º—ã—Ö {int(total_water_goal) + int(water_intake_w)} –º–ª –∂–∏–¥–∫–æ—Å—Ç–∏.\n'
                                                       f'<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ —Å–≤–æ—é –Ω–æ—Ä–º—É üíß', parse_mode='HTML')
        else:
            photo = await message.answer_photo(photo=FSInputFile('water_intake.jpg', filename='–ì—Ä–∞—Ñ–∏–∫ –≤–æ–¥—ã'),
                                               caption='<b>–û—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!</b>\n'
                                                       f'–í—ã —É–ø–æ—Ç—Ä–µ–±–∏–ª–∏ {logged_water} –º–ª –∏–∑ —Ç—Ä–µ–±—É–µ–º—ã—Ö {int(total_water_goal) + int(water_intake_w)} –º–ª –∂–∏–¥–∫–æ—Å—Ç–∏.\n'
                                                       f'–û—Å—Ç–∞–ª–æ—Å—å –µ—â–µ {int(total_water_goal) + int(water_intake_w) - int(logged_water)} –º–ª –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–æ—Ä–º—ã.',
                                               parse_mode='HTML')
    await show_keyboard(photo)

def get_food_info(product_name):
    url = f"https://world.openfoodfacts.org/cgi/search.pl?action=process&search_terms={product_name}&json=true"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        products = data.get('products', [])
        if products:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            first_product = products[0]
            return {
                'name': first_product.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'calories': first_product.get('nutriments', {}).get('energy-kcal_100g', 0)
            }
        return None
    print(f"–û—à–∏–±–∫–∞: {response.status_code}")
    return None


@router.message(Command('food'))
async def calories(message: Message, state: FSMContext):
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if not data.get('name'):
        p = await message.answer('<b><u>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–ï–¥–∞"</u></b>\n\n'
                                 '<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç.</b> –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.',
                                 parse_mode='HTML')
        await show_keyboard(p)
    else:
        await message.answer(
            '<b><u>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–ï–¥–∞"</u></b>\n\n'
            '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å.',
            parse_mode='HTML'
        )
        await state.set_state(Food.product)


@router.message(Food.product)
async def process_product_input(message: Message, state: FSMContext):
    product = message.text.strip()
    if not product:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    elif not re.match('^[A-Za-z–ê-–Ø–∞-—è–Å—ës ]+$', product):
        await message.answer(
            '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.')
        return

    await state.update_data(product=product)

    food_info = get_food_info(product)
    if food_info is None:
        await message.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    product_name = food_info['name']
    calories_per_100g = food_info['calories']

    await message.answer(
        f"{product_name} ‚Äî {calories_per_100g} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n"
        f"–°–∫–æ–ª—å–∫–æ –í—ã —Å—ä–µ–ª–∏?"
    )
    await state.set_state(Food.gram)
    await state.update_data(calories_per_100g=calories_per_100g)


@router.message(Food.gram)
async def process_weight_input(message: Message, state: FSMContext):
    data = await state.get_data()
    gram = message.text.strip()

    if not gram.isdigit() or not (0 <= float(gram) <= 8000):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª-–≤–æ –≥—Ä–∞–º–º:')
        return

    await state.update_data(gram=gram)
    calories_per_100g = data.get('calories_per_100g')
    total_calories = (int(calories_per_100g) / 100) * float(gram)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logged_calories = data.get('logged_calories', 0)
    logged_calories += total_calories
    await state.update_data(logged_calories=logged_calories)

    a = await message.answer(
        f'–í—ã —Å—ä–µ–ª–∏: {total_calories:.1f} –∫–∫–∞–ª.\n'
        f'<b>–í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å:</b> {logged_calories:.1f} –∫–∫–∞–ª.',
        parse_mode='HTML'
    )
    await show_keyboard(a)

async def get_burned_calories(exercise_name):
    url = "https://api.api-ninjas.com/v1/caloriesburned"
    headers = {"X-Api-Key": API_TRAIN}
    params = {"activity": exercise_name}
    response = requests.get(url, headers=headers, params=params)
    if response.status_code == 200:
        data = response.json()  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        if len(data) == 0:
            return None, None
        else:
            random_index = random.randint(0, len(data) - 1)
            new_data = data[random_index]
            if isinstance(new_data, dict) and len(new_data) > 0:
                return new_data.get('calories_per_hour'), new_data.get('name')
    return None, None


@router.message(Command('training'))
async def start_training(message: Message, state: FSMContext):
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if not data.get('name'):
        p = await message.answer('<b><u>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"</u></b>\n\n'
                                 '<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç.</b> –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.',
                                 parse_mode='HTML')
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_keyboard(p)
    else:
        await message.answer(
            '<b><u>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"</u></b>\n\n'
            '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.',
            parse_mode='HTML'
        )
        await state.set_state(Workout.name_w)


@router.message(Workout.name_w)
async def training_name(message: Message, state: FSMContext):
    name_w = message.text.strip()
    if not name_w:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    elif not re.match('^[A-Za-zs ]+$', name_w):
        await message.answer(
            '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.')
        return
    await state.update_data(name_w=name_w)
    await message.answer('–ö–∞–∫ –¥–æ–ª–≥–æ –¥–ª–∏–ª–∞—Å—å –í–∞—à–µ –∑–∞–Ω—è—Ç–∏–µ?')
    await state.set_state(Workout.time)


@router.message(Workout.time)
async def training_time(message: Message, state: FSMContext):
    time = message.text.strip()
    if not time.isdigit() or not (0 <= int(time) <= 1440):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1440):')
        return
    await state.update_data(time=int(time))

    data = await state.get_data()
    exercise_name = data.get('name_w')
    duration_minutes = data.get('time')

    total_calories, exercise_n = await get_burned_calories(exercise_name)
    burned_calories = data.get('burned_calories', 0)
    if total_calories is not None:
        total_calories_minute = (int(total_calories) // 60) * int(duration_minutes)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        burned_calories += total_calories_minute
        await state.update_data(burned_calories=burned_calories)

        water_intake_w = data.get('water_intake_w', 0)
        water_intake = (int(duration_minutes) // 30) * 200
        water_intake_w += water_intake
        await state.update_data(water_intake_w=water_intake_w)

        a = await message.answer(
            f'üèÉ‚Äç‚ôÄÔ∏è‚Äç‚û°Ô∏è {exercise_n.capitalize()} {duration_minutes} –º–∏–Ω—É—Ç - {total_calories_minute} –∫–∫–∞–ª.\n'
            f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –≤—ã–ø–∏—Ç—å {int(water_intake)} –º–ª –≤–æ–¥—ã'
        )
    else:
        a = await message.answer(
            '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏—è—Ö.')
    await show_keyboard(a)

def plot_calorie(message, calorie_goal, logged_calories, burned_calories):
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —É–∂–µ –∑–∞–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π
    adjusted_target = int(logged_calories) - int(burned_calories)

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    categories = ['–ö–∞–ª–æ—Ä–∏–∏ –∑–∞ –¥–µ–Ω—å', '–¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π']
    values = [adjusted_target, calorie_goal]
    colors = ['orange', 'green']

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig, ax = plt.subplots()
    bars = ax.bar(categories, values, color=colors)

    # –ü–æ–¥–ø–∏—Å–∏ –Ω–∞–¥ —Å—Ç–æ–ª–±–∏–∫–∞–º–∏
    for bar in bars:
        yval = bar.get_height()
        ax.text(bar.get_x() + bar.get_width() / 2, yval, round(yval, 2), ha='center', va='bottom')

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏, —Ä–∏—Å—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π —Å—Ç–æ–ª–±–∏–∫
    if burned_calories > 0:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å—Ç–æ–ª–±–∏–∫—É, –∏–∑–º–µ–Ω—è—è –µ–≥–æ –≤—ã—Å–æ—Ç—É
        ax.bar('–ö–∞–ª–æ—Ä–∏–∏ –∑–∞ –¥–µ–Ω—å', int(burned_calories), bottom=int(adjusted_target),
               color='red', label='–°–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏')

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –º–µ—Ç–∫–∏
    ax.set_title('–ö–∞–ª–æ—Ä–∏–∏ –∑–∞ –¥–µ–Ω—å')
    ax.set_ylabel('–û–±—ä–µ–º (–∫–∫–∞–ª)')

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
    ax.legend(loc='upper left')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    plt.savefig('calorie_day.jpg')
    plt.close()


@router.message(Command('progress'))
async def start_progress(message: Message, state: FSMContext):
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if not data.get('name'):
        p = await message.answer('<b><u>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≥—Ä–µ—Å—Å"</u></b>\n\n'
                                 '<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç.</b> –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.',
                                 parse_mode='HTML')
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_keyboard(p)
    else:
        await message.answer(
            '<b><u>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≥—Ä–µ—Å—Å"</u></b>\n\n'
            '<b>–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–æ –≤–æ–¥–µ:</b>',
            parse_mode='HTML'
        )
        data = await state.get_data()
        current_temp, total_water_goal, remaining_water = await calculate_water_goal(message, data)
        water_intake_w = data.get('water_intake_w', 0)
        logged_water = data.get('logged_water', 0)
        plot_water_intake(message, logged_water, total_water_goal, water_intake_w)
        if water_intake_w == 0:
            if (int(total_water_goal) - int(logged_water)) == 0:
                await message.answer_photo(photo=FSInputFile('water_intake.jpg', filename='–ì—Ä–∞—Ñ–∏–∫ –≤–æ–¥—ã'),
                                           caption=f'–í—ã –≤—ã–ø–∏–ª–∏ {logged_water} –º–ª –∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö {int(total_water_goal)} –º–ª –≤–æ–¥—ã.\n'
                                                   f'<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b> –í—ã –≤—ã–ø–∏–ª–∏ —Å–≤–æ—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É',
                                           parse_mode='HTML')
            elif (int(total_water_goal) - int(logged_water)) < 0:
                await message.answer_photo(photo=FSInputFile('water_intake.jpg', filename='–ì—Ä–∞—Ñ–∏–∫ –≤–æ–¥—ã'),
                                           caption=f'–í—ã –≤—ã–ø–∏–ª–∏ {logged_water} –º–ª –∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö {int(total_water_goal)} –º–ª –≤–æ–¥—ã.\n'
                                                   f'<b>–û—Å—Ç–æ—Ä–æ–∂–Ω–æ!</b> –í—ã –≤—ã–ø–∏–ª–∏ –±–æ–ª—å—à–µ –Ω–æ—Ä–º—ã',
                                           parse_mode='HTML')
            else:
                await message.answer_photo(photo=FSInputFile('water_intake.jpg', filename='–ì—Ä–∞—Ñ–∏–∫ –≤–æ–¥—ã'),
                                           caption=f'–í—ã –≤—ã–ø–∏–ª–∏ {logged_water} –º–ª –∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö {int(total_water_goal)} –º–ª –≤–æ–¥—ã.\n'
                                                   f'–û—Å—Ç–∞–ª–æ—Å—å –µ—â–µ {int(remaining_water)} –º–ª –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã.')
        else:
            if (int(total_water_goal) + int(water_intake_w) - int(logged_water)) == 0:
                await message.answer_photo(photo=FSInputFile('water_intake.jpg', filename='–ì—Ä–∞—Ñ–∏–∫ –≤–æ–¥—ã'),
                                           caption='<b>–•–æ—Ä–æ—à–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!</b>\n'
                                                   f'–í—ã –≤—ã–ø–∏–ª–∏ {logged_water} –º–ª –∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö {int(total_water_goal) + int(water_intake_w)} –º–ª –≤–æ–¥—ã.\n'
                                                   f'<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b> –í—ã –≤—ã–ø–∏–ª–∏ —Å–≤–æ—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É',
                                           parse_mode='HTML')
            elif (int(total_water_goal) + int(water_intake_w) - int(logged_water)) < 0:
                await message.answer_photo(photo=FSInputFile('water_intake.jpg', filename='–ì—Ä–∞—Ñ–∏–∫ –≤–æ–¥—ã'),
                                           caption='<b>–•–æ—Ä–æ—à–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!</b>\n'
                                                   f'–í—ã –≤—ã–ø–∏–ª–∏ {logged_water} –º–ª –∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö {int(total_water_goal) + int(water_intake_w)} –º–ª –≤–æ–¥—ã.\n'
                                                   f'<b>–û—Å—Ç–æ—Ä–æ–∂–Ω–æ!</b> –í—ã –≤—ã–ø–∏–ª–∏ –±–æ–ª—å—à–µ –Ω–æ—Ä–º—ã',
                                           parse_mode='HTML')
            else:
                await message.answer_photo(photo=FSInputFile('water_intake.jpg', filename='–ì—Ä–∞—Ñ–∏–∫ –≤–æ–¥—ã'),
                                           caption='<b>–•–æ—Ä–æ—à–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!</b>\n'
                                                   f'–í—ã –≤—ã–ø–∏–ª–∏ {logged_water} –º–ª –∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö {int(total_water_goal) + int(water_intake_w)} –º–ª –≤–æ–¥—ã.\n'
                                                   f'–û—Å—Ç–∞–ª–æ—Å—å –µ—â–µ {int(total_water_goal) + int(water_intake_w) - int(logged_water)} –º–ª –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã.',
                                           parse_mode='HTML')

        await message.answer('<b>–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å:</b>',
                             parse_mode='HTML')
        calorie_goal = data.get('custom_calorie_goal', 0)
        logged_calories = data.get('logged_calories', 0)
        burned_calories = data.get('burned_calories', 0)
        plot_calorie(message, calorie_goal, logged_calories, burned_calories)
        a = await message.answer_photo(photo=FSInputFile('calorie_day.jpg', filename='–ì—Ä–∞—Ñ–∏–∫ –∫–∞–ª–æ—Ä–∏–π'),
                                       caption=f'–°—ä–µ–¥–µ–Ω–æ  {int(logged_calories)} –∫–∞–ª–ª –∏–∑ {float(calorie_goal)} –∫–∞–ª–ª.\n'
                                               f'–°–æ–≥–Ω–∞–ª–∏ {int(burned_calories)} –∫–∞–ª–ª.\n'
                                               f'–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è {int(logged_calories) - int(burned_calories)} –∫–∞–ª–ª.',
                                       parse_mode='HTML')
        await show_keyboard(a)


